//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Musika.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MusikaEntities : DbContext
    {
        public MusikaEntities()
            : base("name=MusikaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Ads> Ads { get; set; }
        public virtual DbSet<ArtistGenre> ArtistGenre { get; set; }
        public virtual DbSet<ArtistPhotos> ArtistPhotos { get; set; }
        public virtual DbSet<ArtistRelated> ArtistRelated { get; set; }
        public virtual DbSet<ArtistsNotLatin> ArtistsNotLatin { get; set; }
        public virtual DbSet<Genre> Genre { get; set; }
        public virtual DbSet<HotTour> HotTour { get; set; }
        public virtual DbSet<MSource> MSource { get; set; }
        public virtual DbSet<MusicSource> MusicSource { get; set; }
        public virtual DbSet<Notification_test> Notification_test { get; set; }
        public virtual DbSet<NotificationSend> NotificationSend { get; set; }
        public virtual DbSet<TicketingInventory> TicketingInventory { get; set; }
        public virtual DbSet<TourPerformers> TourPerformers { get; set; }
        public virtual DbSet<TourPhoto> TourPhoto { get; set; }
        public virtual DbSet<UsCities> UsCities { get; set; }
        public virtual DbSet<UserArtists> UserArtists { get; set; }
        public virtual DbSet<UserDevices> UserDevices { get; set; }
        public virtual DbSet<UserFriends> UserFriends { get; set; }
        public virtual DbSet<UserGoing> UserGoing { get; set; }
        public virtual DbSet<UserNotifications> UserNotifications { get; set; }
        public virtual DbSet<UserSettings> UserSettings { get; set; }
        public virtual DbSet<UserTourDate> UserTourDate { get; set; }
        public virtual DbSet<UtcTimeZone> UtcTimeZone { get; set; }
        public virtual DbSet<Venue> Venue { get; set; }
        public virtual DbSet<CountryCodes> CountryCodes { get; set; }
        public virtual DbSet<TicketingCategory> TicketingCategory { get; set; }
        public virtual DbSet<TicketingInventoryDetails> TicketingInventoryDetails { get; set; }
        public virtual DbSet<TicketingEvents> TicketingEvents { get; set; }
        public virtual DbSet<TicketingInventoryDetailsNew> TicketingInventoryDetailsNew { get; set; }
        public virtual DbSet<TicketingInventoryNew> TicketingInventoryNew { get; set; }
        public virtual DbSet<TicketingEventsNew> TicketingEventsNew { get; set; }
        public virtual DbSet<TicketingEventTickets> TicketingEventTickets { get; set; }
        public virtual DbSet<CreditCardDetails> CreditCardDetails { get; set; }
        public virtual DbSet<TicketingEventNewStaff> TicketingEventNewStaff { get; set; }
        public virtual DbSet<Coupons> Coupons { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Events> Events { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<UserActivation> UserActivation { get; set; }
        public virtual DbSet<Users_BAK> Users_BAK { get; set; }
        public virtual DbSet<ArtistBackup> ArtistBackup { get; set; }
        public virtual DbSet<ArtistBackup2> ArtistBackup2 { get; set; }
        public virtual DbSet<tempEmails> tempEmails { get; set; }
        public virtual DbSet<TicketingEventNewStaffTemp> TicketingEventNewStaffTemp { get; set; }
        public virtual DbSet<TicketingEventsNewTemp> TicketingEventsNewTemp { get; set; }
        public virtual DbSet<TicketingEventTicketConfirmationTemp> TicketingEventTicketConfirmationTemp { get; set; }
        public virtual DbSet<TicketingUsers> TicketingUsers { get; set; }
        public virtual DbSet<TicketingEventTicketConfirmation> TicketingEventTicketConfirmation { get; set; }
        public virtual DbSet<Artists> Artists { get; set; }
        public virtual DbSet<TourDate> TourDate { get; set; }
        public virtual DbSet<ImportBulkTicket> ImportBulkTicket { get; set; }
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<TicketingEventTicketsSummary> TicketingEventTicketsSummary { get; set; }
        public virtual DbSet<TicketingEventTicketsSummaryTemp> TicketingEventTicketsSummaryTemp { get; set; }
        public virtual DbSet<PaymentStatus> PaymentStatus { get; set; }
        public virtual DbSet<CountriesList> CountriesList { get; set; }
        public virtual DbSet<StateList> StateList { get; set; }
    
        public virtual int spDashboradSummary(Nullable<int> eventID)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDashboradSummary", eventIDParameter);
        }
    
        public virtual ObjectResult<SpGetEventDetailsByTourDateId_Result> SpGetEventDetailsByTourDateId(Nullable<int> tourDateId)
        {
            var tourDateIdParameter = tourDateId.HasValue ?
                new ObjectParameter("TourDateId", tourDateId) :
                new ObjectParameter("TourDateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetEventDetailsByTourDateId_Result>("SpGetEventDetailsByTourDateId", tourDateIdParameter);
        }
    }
}
